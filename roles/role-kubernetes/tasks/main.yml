---
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- include_tasks: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include_tasks: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: Ensure dependencies are installed.
  ansible.builtin.package: 
    name: curl 
    state: present

- name: Disable swap
  ansible.builtin.command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Remowe swap from /etc/fstab
  ansible.builtin.lineinfile:
    path: '/etc/fstab'
    regexp: '\sswap\s'
    state: absent

- name: Install Kubernetes packages.
  ansible.builtin.package:
    name: "{{ item.name | default(item) }}"
    state: "{{ item.state | default('present') }}"
  notify: restart kubelet
  with_items: "{{ kubernetes_packages }}"
  throttle: 1 

- include_tasks: sysctl-setup.yml

- name: Setup crictl
  ansible.builtin.command: crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock 
  changed_when: false

- name: Ensure kubelet is restarted immediately if necessary.
  meta: flush_handlers

- name: Ensure kubelet is started and enabled at boot.
  ansible.builtin.service:
    name: kubelet
    state: started
    enabled: true

- name: Check if Kubernetes has already been initialized.
  ansible.builtin.stat:
    path: /etc/kubernetes/admin.conf
  register: kubernetes_init_stat

- name: Reset Old Cluster on all nodes
  ansible.builtin.command: kubeadm reset --force
  when: kubernetes_init_stat.stat.exists

# Add kube-vip static pod
- include_tasks: kube-vip.yml
  when: kubernetes_role == 'first-control-node' and groups['k8s_ha_control_node'] | length > 1

# Set up first control node.
- include_tasks: control-node-setup.yml
  when: kubernetes_role == 'first-control-node'

# Set up nodes.
- name: Get the kubeadm join command from the Kubernetes control node.
  ansible.builtin.command: kubeadm token create --print-join-command
  changed_when: false
  when: kubernetes_role == 'first-control-node'
  register: kubernetes_join_command_result

- name: Join other control-node if set
  block:
    - name: Save join_control_node_certificate_key
      ansible.builtin.set_fact:
        control_node_join_cert_key: "{{ hostvars[groups['k8s_ha_control_node'][0]]['join_cert_key']['stdout_lines'][2] | trim }}"
      when: kubernetes_role == 'first-control-node'
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['k8s_ha_control_node'] }}"

    - name: Set the kubeadm other control node join command 
      ansible.builtin.set_fact:
        kubernetes_control_node_join_command: >
          {{ kubernetes_join_command_result.stdout }}
          --apiserver-advertise-address {{ hostvars[item]['kubernetes_apiserver_advertise_address'] }}
          {{ kubernetes_control_node_join_command_extra_opts }}
          {{ control_node_join_cert_key }}
      when: kubernetes_join_command_result.stdout is defined and kubernetes_role == 'first-control-node'
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['k8s_ha_control_node'] }}"

    - name: Print the init output to screen.
      ansible.builtin.debug:
        var: kubernetes_control_node_join_command
      when: kubernetes_role == 'control-node' or kubernetes_role == 'first-control-node'

    - include_tasks: kube-vip.yml

    - include_tasks: other-control-node-setup.yml
      when: kubernetes_role == 'control-node'

  when: groups['k8s_ha_control_node'] | length > 1

- name: Join not control plane nodes if set
  block:
    - name: Set the kubeadm node join command
      ansible.builtin.set_fact:
        kubernetes_node_join_command: >
          {{ kubernetes_join_command_result.stdout }}
          {{ hostvars[groups['k8s_workers'][0]]['kubernetes_join_command_extra_opts'] }} 
      when: kubernetes_join_command_result.stdout is defined
      delegate_to: "{{ item }}"
      delegate_facts: true
      with_items: "{{ groups['k8s_not_control_nodes'] }}"

    - name: Print the init output to screen.
      ansible.builtin.debug:
        var: kubernetes_node_join_command
      when: kubernetes_role == 'node' 
  
    - include_tasks: node-setup.yml
      when: kubernetes_role == 'node'

  when: groups['k8s_not_control_nodes'] | length > 0

- name: Add taints to gw nodes (if configured).
  kubernetes.core.k8s_taint:
    state: present
    kubeconfig: "/home/{{ ansible_host_username.stdout }}/.kube/config"
    name: "{{ node }}"
    taints:
    - effect: "{{ kubernetes_gw_taints.effect }}"
      key: "{{ kubernetes_gw_taints.key }}"
  loop: "{{ groups['k8s_gateways'] }}"
  loop_control:
    loop_var: node
  when: kubernetes_role == 'first-control-node' and groups['k8s_gateways'] | length > 0

- name: Configure proper listen ip address for kube-prometheus-stack metrics
  block:
    - include_tasks: k8s_cp_bind_address_change.yml
      loop: "{{ k8s_cp_manifest_file }}"
      loop_control:
        loop_var: k8s_manifests
    
    - name: Change metrics listen url in etcd manifest
      ansible.builtin.lineinfile:
        path: /etc/kubernetes/manifests/etcd.yaml
        regexp: '(^\s*-\s--listen-metrics-urls\=\s*){{ item.search }}$'
        line:  '\1{{ item.replace }}'
        backrefs: yes
      loop:
      - { search: "http://127.0.0.1:2381", replace: "http://{{ ansible_host }}:2381" }

    - include_tasks: k8s_cp_probes_address_changer.yml
      loop: "{{ k8s_cp_manifest_file }}"
      loop_control:
        loop_var: k8s_manifests

  when: inventory_hostname in groups['k8s_ha_control_node']

- name: Wait for kube VIP API address is stabilized
  wait_for:
    host: "{{ k8s_cp }}"
    port: "{{ k8s_cp_port }}"
    delay: 10
  when: kubernetes_role == 'first-control-node' and groups['k8s_ha_control_node'] | length > 1

- name: Set node label on gw nodes
  kubernetes.core.k8s:
    kubeconfig: "/home/{{ ansible_host_username.stdout }}/.kube/config"
    state: patched
    kind: Node
    name: "{{ item }}"
    definition:
      metadata:
        labels:
          node-role.kubernetes.io: gw
  loop: "{{ groups['k8s_gateways'] }}"
  when: kubernetes_role == 'first-control-node' and groups['k8s_gateways'] | length > 0

- name: Set node label on worker nodes
  kubernetes.core.k8s:
    kubeconfig: "/home/{{ ansible_host_username.stdout }}/.kube/config"
    state: patched
    kind: Node
    name: "{{ item }}"
    definition:
      metadata:
        labels:
          node-role.kubernetes.io: worker
  loop: "{{ groups['k8s_workers'] }}"
  when: kubernetes_role == 'first-control-node' and groups['k8s_workers'] | length > 0

- name: Wait for kube-vip pods become ready
  ansible.builtin.command: "kubectl wait --namespace=kube-system --for=condition=Ready pod -l component=kube-vip --timeout=600s"
  become: false
  when: kubernetes_role == 'first-control-node' and groups['k8s_ha_control_node'] | length > 1

- name: Wait till the control-plane is Ready
  kubernetes.core.k8s_info:
    kubeconfig: "/home/{{ ansible_host_username.stdout }}/.kube/config"
    kind: Pod
    wait: yes
    name: "{{ item }}-{{ inventory_hostname }}"
    namespace: kube-system
    wait_sleep: 10
    wait_timeout: 360
    wait_condition:
      type: Ready
  loop:
    - etcd
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler
  when: kubernetes_role == 'first-control-node'
